action-mybatis.xml 에 

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

로바꿔준다







그래도 안되면

1. action-servlet.xml에 
          <prop key="/member/memberForm.do" >form</prop>
          <prop key="/member/modMemberForm.do" >form</prop>          
위와 같이 하단에 한줄 수정폼을 추가한다.

2. pro23에 있는 modMember.jsp를 view/member폴더에 복사하고 파일명끝에Form를 추가하여
   modMemberForm으로 수정한다.

3.com.spring.member.controller에 MemberControllerImpl.java 파일에 form이 있는지 확인하고 실행한다.
  http://localhost:8085/pro24/member/listMembers.do

4. 실행해보면 삭제는 있으나 수정이 없음을 알 수 있다 그래서 listMembers.jsp 파일에 수정 항목을 추가한다.
      <td><b>삭제</b></td>
      <td><b>수정</b></td>

      <td><a href="${contextPath}/member/removeMember.do?id=${member.id }">삭제하기</a></td>
      <td><a href="${contextPath}/member/modMemberForm.do?id=${member.id }">수정하기</a></td>

5. http://localhost:8085/pro24/member/modMemberForm.do?id=lee 해도 오류가 발생함.

6. 수정할 내용은 다음과 같다
   1) modMemberForm.jsp 파일의 <body>바로 밑에
     <form method="post"   action="${contextPath}/member/modMember.do"> 수정한다.
   2) MemberController.java에 가서 
       public ModelAndView removeMember(HttpServletRequest request, HttpServletResponse response) throws Exception;
       public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception;
       modMember를 추가한다.
      그리고 
       MemberControllerImpl.java에서 
    	@Override
	public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception {
		return null;
            }
      자동 생성 시킨다.
   3) modMemberForm.jsp 파일을 수정한다.
      <td width="400"><input type="text" name="id" value="${member.id}" disabled></td>
    </tr>
   <tr>
     <td width="200"><p align="right">비밀번호</td>
      <td width="400"><input type="password" name="pwd" value="${member.pwd}"></td>
   </tr>
     <tr>
       <td width="200"><p align="right">이름</td>
       <td width="400"><p><input type="text" name="name" value="${member.name}"></td>
   </tr>
   <tr>
      <td width="200"><p align="right">이메일</td>
      <td width="400"><p><input type="text" name="email" value="${member.email}"></td>
   </tr>
   <tr>
   <tr>
      <td width="200"><p align="right">가입일</td>
      <td width="400"><p><input type="text" name="joinDate" value="${member.joinDate}" disabled></td>


7. 그래도 내용이 수정항목에 내용이 나타나지 않기 때문에 MemberControllerImpl.java에서
    public ModelAndView form 클래스를 수정하는데 find가 되지 않을 것이다.

    public ModelAndView form(HttpServletRequest request, HttpServletResponse response) throws Exception {
	String viewName = getViewName(request); //modMemberForm
	ModelAndView mav = new ModelAndView();
	if(viewName.equals("/modMemberForm")){
	    String id = request.getParameter("id");
	    MemberVO memberVO = memberService.findMember(id);
	    mav.addObject("member", memberVO);
	}
	mav.setViewName(viewName);
	return mav;
   }

8. 또한    
   MemberService.java
   public int removeMember(String id) throws DataAccessException;
   public MemberVO findMember(String id) throws DataAccessException;

   MemberServiceImpl.java
   @Override
   public MemberVO findMember(String id) throws DataAccessException {
       MemberVO memberVO = memberDAO.selectMember(id);
       return memberVO;
   }
  memberDAO.select가 되지 않는다.

8. MemberDAOImpl.java를 생성해야 한다.
   그래서
   MemberDAO.java
   public int deleteMember(String id) throws DataAccessException;
   public MemberVO selectMember(String id) throws DataAccessException;

   MemberDAOImpl.java 
   @Override
   public MemberVO selectMember(String id) throws DataAccessException {
      MemberVO memberVO = (MemberVO) sqlSession.selectOne("mapper.member.selectMemberById", id);
      return memberVO;
   }	
   를 생성한다. 
   mapper.member.selectMemberById 는 이전에 만들어져 있는 것을 확인하도록 한다.
   -->폴더를 보고 mappers라고 하면 않됨.<mapper namespace="mapper.member">

9. 위와 같이하고 
   http://localhost:8085/pro24/member/listMembers.do
  을 실행하고 [수정] 을 클릭하고 수정후 [수정] 버튼을 클릭하면
   action-servlet.xml 파일에 있는 
   <prop key="/member/removeMember.do">removeMember</prop>
  <prop key="/member/modMember.do">modMember</prop>
  <prop key="/member/memberForm.do" >form</prop>
  이 동작을 하게 된다.

10. MemberController.java에 있는 
    @Override
    public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception {
	// TODO Auto-generated method stub
	return null;
   }
  동작을 하게 된다.

11. 번 부터는 스스로 해결하도록 한다.
    삽입과 동일한 내용을 만들면 되는데 단 한가지 주의 할 것은 
    <input type="text" name="id" value="${member.id}" disabled></td>
    <input type="hidden" name="id" value="${member.id}" />
    disabled 된 id는 값을 입력하지 않기 때문에 hidden을 추가해야 한다는 것이다.    

1. action-servlet.xml에 
          <prop key="/member/memberForm.do" >form</prop>
          <prop key="/member/modMemberForm.do" >form</prop>          
위와 같이 하단에 한줄 수정폼을 추가한다.

2. pro23에 있는 modMember.jsp를 view/member폴더에 복사하고 파일명끝에Form를 추가하여
   modMemberForm으로 수정한다.

3.com.spring.member.controller에 MemberControllerImpl.java 파일에 form이 있는지 확인하고 실행한다.
  http://localhost:8085/pro24/member/listMembers.do

4. 실행해보면 삭제는 있으나 수정이 없음을 알 수 있다 그래서 listMembers.jsp 파일에 수정 항목을 추가한다.
      <td><b>삭제</b></td>
      <td><b>수정</b></td>

      <td><a href="${contextPath}/member/removeMember.do?id=${member.id }">삭제하기</a></td>
      <td><a href="${contextPath}/member/modMemberForm.do?id=${member.id }">수정하기</a></td>

5. http://localhost:8085/pro24/member/modMemberForm.do?id=lee 해도 오류가 발생함.

6. 수정할 내용은 다음과 같다
   1) modMemberForm.jsp 파일의 <body>바로 밑에
     <form method="post"   action="${contextPath}/member/modMember.do"> 수정한다.
   2) MemberController.java에 가서 
       public ModelAndView removeMember(HttpServletRequest request, HttpServletResponse response) throws Exception;
       public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception;
       modMember를 추가한다.
      그리고 
       MemberControllerImpl.java에서 
    	@Override
	public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception {
		return null;
            }
      자동 생성 시킨다.
   3) modMemberForm.jsp 파일을 수정한다.
      <td width="400"><input type="text" name="id" value="${member.id}" disabled></td>
    </tr>
   <tr>
     <td width="200"><p align="right">비밀번호</td>
      <td width="400"><input type="password" name="pwd" value="${member.pwd}"></td>
   </tr>
     <tr>
       <td width="200"><p align="right">이름</td>
       <td width="400"><p><input type="text" name="name" value="${member.name}"></td>
   </tr>
   <tr>
      <td width="200"><p align="right">이메일</td>
      <td width="400"><p><input type="text" name="email" value="${member.email}"></td>
   </tr>
   <tr>
   <tr>
      <td width="200"><p align="right">가입일</td>
      <td width="400"><p><input type="text" name="joinDate" value="${member.joinDate}" disabled></td>


7. 그래도 내용이 수정항목에 내용이 나타나지 않기 때문에 MemberControllerImpl.java에서
    public ModelAndView form 클래스를 수정하는데 find가 되지 않을 것이다.

    public ModelAndView form(HttpServletRequest request, HttpServletResponse response) throws Exception {
	String viewName = getViewName(request); //modMemberForm
	ModelAndView mav = new ModelAndView();
	if(viewName.equals("/modMemberForm")){
	    String id = request.getParameter("id");
	    MemberVO memberVO = memberService.findMember(id);
	    mav.addObject("member", memberVO);
	}
	mav.setViewName(viewName);
	return mav;
   }

8. 또한    
   MemberService.java
   public int removeMember(String id) throws DataAccessException;
   public MemberVO findMember(String id) throws DataAccessException;

   MemberServiceImpl.java
   @Override
   public MemberVO findMember(String id) throws DataAccessException {
       MemberVO memberVO = memberDAO.selectMember(id);
       return memberVO;
   }
  memberDAO.select가 되지 않는다.

8. MemberDAOImpl.java를 생성해야 한다.
   그래서
   MemberDAO.java
   public int deleteMember(String id) throws DataAccessException;
   public MemberVO selectMember(String id) throws DataAccessException;

   MemberDAOImpl.java 
   @Override
   public MemberVO selectMember(String id) throws DataAccessException {
      MemberVO memberVO = (MemberVO) sqlSession.selectOne("mapper.member.selectMemberById", id);
      return memberVO;
   }	
   를 생성한다. 
   mapper.member.selectMemberById 는 이전에 만들어져 있는 것을 확인하도록 한다.
   -->폴더를 보고 mappers라고 하면 않됨.<mapper namespace="mapper.member">

9. 위와 같이하고 
   http://localhost:8085/pro24/member/listMembers.do
  을 실행하고 [수정] 을 클릭하고 수정후 [수정] 버튼을 클릭하면
   action-servlet.xml 파일에 있는 
   <prop key="/member/removeMember.do">removeMember</prop>
  <prop key="/member/modMember.do">modMember</prop>
  <prop key="/member/memberForm.do" >form</prop>
  이 동작을 하게 된다

10. MemberController.java에 있는 
    @Override
    public ModelAndView modMember(HttpServletRequest request, HttpServletResponse response) throws Exception {
	// TODO Auto-generated method stub
	return null;
   }
  동작을 하게 된다.

11. 번 부터는 스스로 해결하도록 하라고 동영상에도 설명이 되어 있지 않다.
     힌트는 삽입과 동일한 코드를 사용하면 되면 이름만 일부 다르게 표현할 뿐이다.
     그리고 모든 파일에는 interface가 선언되어 있어야 한다.

     MemberControllerImpl.java

     @Override public ModelAndView modMember(HttpServletRequest request,
     HttpServletResponse response) throws Exception {
     request.setCharacterEncoding("utf-8"); MemberVO memberVO = new MemberVO();
    /*
     * String id=request.getParameter("id"); 
     * String pwd=request.getParameter("pwd");
     * String name=request.getParameter("name");
     * String email=request.getParameter("email");
     * memberVO.setId(id); memberVO.setPwd(pwd);
     * memberVO.setName(name);
     * memberVO.setEmail(email);
     */
     bind(request, memberVO);
     memberService.modMember(memberVO);
     ModelAndView mav = new ModelAndView("redirect:/member/listMembers.do");
             return mav;
      }


     
     MemberServiceImpl.java

     @Override 
     public int modMember(MemberVO memberVO) 
              throws DataAccessException{ 
           return memberDAO.updateMember(memberVO); 
     }



     MemberDAOImpl.java

     @Override
      public int updateMember(MemberVO memberVO) throws
	  DataAccessException { 
              int result =sqlSession.insert("mapper.member.updateMember", memberVO); 
           return result;
      }

12. disabled이 되면 값이 전달되지 않기 때문에 아래와 같이 
     hidden을 추가해야 한다는 것이다.    
     <input type="text" name="id" value="${member.id}" disabled></td>
    <input type="hidden" name="id" value="${member.id}" />
   

※ .java 파일에 브레이커포인터를 하고 디버깅 모드로 실행해 보면 결과를 알 수 있다. 
